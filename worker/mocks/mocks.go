// Code generated by MockGen. DO NOT EDIT.
// Source: worker/worker.go

// Package mock_worker is a generated GoMock package.
package mock_worker

import (
	context "context"
	reflect "reflect"

	fixtures "github.com/KCFLEX/astro-service2.0/cmd/fixtures"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateTable mocks base method.
func (m *MockRepository) CreateTable(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockRepositoryMockRecorder) CreateTable(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockRepository)(nil).CreateTable), ctx)
}

// InsertFixtures mocks base method.
func (m *MockRepository) InsertFixtures(ctx context.Context, footballData fixtures.Fixture) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertFixtures", ctx, footballData)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertFixtures indicates an expected call of InsertFixtures.
func (mr *MockRepositoryMockRecorder) InsertFixtures(ctx, footballData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertFixtures", reflect.TypeOf((*MockRepository)(nil).InsertFixtures), ctx, footballData)
}

// InsertFixturesFromResponse mocks base method.
func (m *MockRepository) InsertFixturesFromResponse(ctx context.Context, response fixtures.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertFixturesFromResponse", ctx, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertFixturesFromResponse indicates an expected call of InsertFixturesFromResponse.
func (mr *MockRepositoryMockRecorder) InsertFixturesFromResponse(ctx, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertFixturesFromResponse", reflect.TypeOf((*MockRepository)(nil).InsertFixturesFromResponse), ctx, response)
}
